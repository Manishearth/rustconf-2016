speakers:
  - name: Joe Duffy
    ident: joe
    image: joe.jpg
    twitter: "xjoeduffyx"
    bio: "Joe Duffy is Co-Founder and Chief Executive Officer of Pulumi Corporation, a venture-backed, stealth startup based in Seattle. Prior to Pulumi, Joe held leadership roles at Microsoft for 12 years in the Developer Division, Operating System Group, and Microsoft Research.  Most recently, he was Director of Engineering and Technical Strategy for Microsoft developer tools.  In this role, Joe drove key technical architecture initiatives across the company, led several incubations around cloud, mobile, and IoT, and had direct responsibility for managing product engineering for the C#, C++, Visual Basic, and F# languages, compilers, static analysis tools, and key Visual Studio services."
  - name: Aaron Turon
    ident: aaron
    image: aaron.jpg
    twitter: "aaron_turon"
    bio: "Aaron Turon (aturon) is a member of the Rust Core Team and employed by Mozilla Research. His main focus in Rust is language design, libraries, and project management. Prior to joining Mozilla, Aaron received his PhD from Northeastern University, with a focus on language and library design around lock-free data structures and other low-level concurrency concerns. His work won the John C. Reynold's award for outstanding dissertation in programming languages. He also worked with Derek Dreyer on correctness proofs of lock-free data structures, developing an early technique for doing so on top of the C11 memory model."
  - name: Carol Nichols
    ident: carol
    image: carol.jpg
    twitter: "carols10cents"
    bio: "Carol Nichols is a co-founder of Integer 32, the world's first Rust consultancy. She's a member of the Rust Core, Community, Cargo, and Infrastructure teams, and an organizer of the Rust Belt Rust conference. Carol is also a coauthor on The Rust Programming Language book, coming to print in October. Carol lives in Pittsburgh, PA with her husband Jake Goulding and her cat, Baby."
  - name: Ashley Williams
    ident: ashley
    image: ashley.jpg
    twitter: "ag_dubs"
    bio: "Ashley is a Services Engineer at npm, Inc. She also represents the Individual Membership on the Node.js Foundation Board of Directors. In her spare time, she contributes to the Rust Programming Language and its package manager, Cargo. She is also a founding organizer of the NodeTogether and RustBridge educational initiatives for underrepresented persons in tech."
  - name: Niko Matsakis
    ident: niko
    image: niko.jpg
    twitter: "nikomatsakis"
    bio: "Nicholas Matsakis (nmatsakis) is a member of the Rust Core Team and employed by Mozilla Research. His main focus in Rust is language design and compiler implementation. At Mozilla, he has also worked on Parallel JavaScript and other parallelization efforts. Prior to joining Mozilla, Niko received his PhD from ETH Zurich, likewise focused on parallelism and language design."
  - name: Andrew Brinker
    ident: andrew
    image: andrew.jpg
    twitter: "andrewbrinker"
    bio: "Andrew Brinker is a space security engineer for the MITRE Corporation, adjunct lecturer at California State University San Bernardino, and Rust contributor. In his spare time he tinkers on Ruse — an embedded Scheme for Rust — and writes about Rust. "
  - name: Sergio Benitez
    ident: sergio
    image: sergio.png
    github: "SergioBenitez"
    bio: "Sergio is a third-year PhD student at Stanford. His research focuses on converging programming language theory with operating systems and security. Before Stanford, Sergio spent time at Google, Apple, and SpaceX where he worked on projects ranging from designing anomaly detection algorithms to tuning the performance of operating systems running on rockets and other spacecraft."
  - name: Michael Gattozzi
    ident: michael
    image: michael.jpg
    github: "mgattozzi"
    bio: "Michael Gattozzi is an avid Rustlang enthusiast who has been using it since the 1.0 release. He talks about it so much that it’s to the point his family, coworkers and friends know him as &ldquo;the guy who won’t shut up about Rust&rdquo;. He has worked on interesting projects like curryrs, a Haskell/Rust FFI library and github-rs, a GitHub API library for Rust. His goal is to help those in the community learn new things they might not have known before and push the boundaries of what is possible with Rust."
  - name: Naomi Testard
    ident: naomi
    image: naomi.jpg
    github: "LeoTestard"
    bio: "Currently a PhD student in verification of concurrent program in Paris and former intern in the Rust team at Mozilla, Naomi is the author of a few parsing tools in Rust and for Rust. She's very interested in the intersection of systems programming and programming languages theory and has been using and contributing to Rust since version 0.6."
  - name: Sean Griffin
    ident: sean
    image: sean.jpg
    twitter: "sgrif"
    bio: "Sean is a committer on Ruby on Rails, the maintainer of Active Record, cohost of The Bike Shed podcast, and the creator of Diesel, an ORM and query builder for Rust. Having spent over a decade in the industry, he now works for Shopify doing open source full time."
  - name: Steve Jenson
    ident: stevej
    image: stevej.jpg
    twitter: "stevej"
    bio: "Steve is an engineer at Buoyant, Inc. and a developer of linkerd, a service mesh for cloud-native applications as well as linkerd-tcp, Buoyant's cloud-native TCP/TLS proxy written in Rust. Steve has a long history of infrastructure engineering at some of the internet's highest traffic services such as Twitter and Google."
  - name: Isis Lovecruft
    ident: isis
    image: isis.jpg
    twitter: "isislovecruft"
    bio: "TBD"
  - name: Henry De Valence
    ident: henry
    image: henry.jpg
    twitter: "hdevalence"
    bio: "TBD"
  - name: Steve Klabnik
    ident: stevek
    image: steve.jpg
    twitter: "steveklabnik"
    bio: "pizza"
  - name: Amit Levy
    ident: alevy
    image: alevy.jpg
    twitter: "aalevy"
    bio: "TBD"
talks:
  - title: "Opening Keynote"
    abstract: "Aaron, Carol, and Niko will deliver an update on the state of all things Rust. You don't want to miss it!"
    speakers: aaron, carol, niko
    ident: keynote
  - title: "Closing Keynote: Safe Systems Software and the Future of Computing"
    abstract: "Someday in the future, all important systems software on the planet will be written in a safe programming language.  The questions are, when, and how do we get there?<br><br>In this talk, I will describe my experiences at Microsoft building a new operating system written entirely in a Rust-like safe systems language.  I will also talk about my subsequent efforts taking those experiences and applying them to the heart of Windows, and the associated technical and cultural challenges."
    speakers: joe
  - title: "Training Sessions"
    abstract: "Join us on Friday for beginner, intermediate, and advanced training sessions, plus a RustBridge workshop for people who are underrepresented in tech! More details will be found <a href=\"training.html\">here</a> as we finalize the sessions. Please note that you need to buy a separate ticket for these; the Saturday conference ticket does not include training."
    speakers: niko, stevek, aaron
  - title: "A Tale of Teaching Rust"
    abstract: "Rust has a reputation of having a very steep learning curve, but is this reputation justified? In this talk I share my experiences teaching Rust to a group of 26 undergraduates as part of a class on programming language theory. None of the students knew Rust going in. Most knew only one language. I walk through the key concepts from Rust that programmers in all languages can use, and that language designers may want to steal, and I talk about how this class of fledgling programmers handled and understood those concepts, what they think of Rust now, and what all of this might mean for teaching Rust effectively in the future."
    speakers: andrew
  - title: "Building Rocket"
    abstract: "Rocket is a web framework for Rust that delivers simplicity, reliability, and performance -- a rare combination. Rocket's ability to deliver in all three areas is largely enabled by Rust's code generation facilities. Based on developer input, Rocket generates code that eliminates boilerplate and leads to more robust, secure, and predictable web applications.<br><br>This talk dissects Rocket and its code generation by describing how Rocket is built. Special attention is placed on elucidating Rocket's use of present and future code generation facilities in Rust."
    speakers: sergio
  - title: "Shipping a Solid Rust Crate"
    abstract: "There's a lot more to releasing a quality crate than just the code. Automating the testing to make sure nothing breaks, checking for test coverage, making sure there are examples, providing documentation are important in making your crate solid and easy to use. Beyond that how do you get people to actually use your crate? You might not know how to increase the visibility of your crate or of small things that can be done to get interest in your crate. This talk covers all of these aspects to help improve the quality of ones crate beyond the code itself."
    speakers: michael
  - title: "Menhir and Friends: the State of the Art of Parsing in Rust"
    abstract: "In this talk we present Menhir, a very powerful LR parsers generator, and how to use it to write Rust parsers (and lexers). We also show some details of the internals of Menhir’s backend for Rust, as well as a short comparative survey of other similar parsing tools and techniques for Rust out here."
    speakers: naomi
  - title: "Type System Tips for the Real World"
    abstract: "Have you ever looked at some of the more exotic capabilities of Rust's type system and wondered &ldquo;why&rdquo;? Why on earth would I ever want a zero sized type? How do I efficiently implement a deeply recursive type? Just what do monomorphization and type erasure actually mean?<br><br>In this talk we'll look at some real world examples from inside Diesel to answer these questions and more. You'll come away from this talk with a stronger understanding of how to use Rust's generics, traits, and exotically sized types."
    speakers: sean
  - title: "Improving Rust Performance Through Profiling and Benchmarking"
    abstract: "This talk will compare and contrast common industry tool support for profiling and debugging Rust applications. We'll discuss our experiences finding and fixing performance problems in a production Rust application."
    speakers: stevej
  - title: "Fast, Safe, Pure-Rust Elliptic Curve Cryptography"
    abstract: "This talk discusses the design and implementation of <code>curve25519-dalek</code>, a pure-Rust implementation of operations on the elliptic curve known as Curve25519. We will discuss the goals of the library and give a brief overview of the implementation strategy. We will also discuss features of the Rust language that allow us to achieve competitive performance without sacrificing safety or readability, and future features that could allow us to achieve more safety and more performance. Finally, we will discuss how <code>-dalek</code> makes it easy to implement complex cryptographic primitives, such as zero-knowledge proofs."
    speakers: isis, henry
    ident: dalek
schedule:
  - name: "Registration"
    time: "8:30 - 9:30am"
  - talk: keynote
    multiple: true
    time: "9:30 - 10:30am"
  - talk: andrew
    time: "10:45 - 11:15am"
  - talk: sergio
    time: "11:30am - 12:00pm"
  - name: "Lunch"
    time: "12:00 - 1:30pm"
  - talk: michael
    time: "1:30 - 2:00pm"
  - talk: naomi
    time: "2:10 - 2:40pm"
  - talk: sean
    time: "2:50 - 3:20pm"
  - name: "Snacks"
    time: "3:20 - 3:50pm"
  - talk: stevej
    time: "3:50 - 4:20pm"
  - talk: dalek
    multiple: true
    time: "4:30 - 5:00pm"
  - talk: joe
    time: "5:15 - 6:00pm"
trainings:
  - title: "Training: Rust for Beginners"
    speakers: stevek
    timeslot: morning
    focus: "Rust Fundamentals: Ownership and Borrowing"
    abstract: "Learn everything you need to get started writing Rust programs. The tutorial puts a focus on Ownership and Borrowing, which are the key techniques that Rust uses to achieve both safety and low-level performance.</p><p>This class assumes no prior knowledge of Rust, though programming experience in some other language would be helpful."
  - title: "Training: Intermediate Rust"
    speakers: aaron
    focus: "Traits and Threads"
    timeslot: morning
    abstract: "Move up a level in Rust knowledge. This tutorial introduces the second key piece of Rust, its trait system. It shows how the trait system is the foundation for generic programming in Rust, allowing you to write one piece of code that can be reused in many contexts. It also covers how to write threaded programs in Rust, and shows how threaded programming in Rust builds on the trait system to guarantee data-race freedom.</p><p>This tutorial assumes basic understanding of ownership and borrowing; if you have been writing Rust for a while, you should do fine."
  - title: "Training: Advanced Rust"
    speakers: niko
    focus: "Advanced Ownership and Borrowing"
    timeslot: afternoon
    abstract: "Start taking full advantage of the power of lifetimes. This tutorial will cover named lifetime parameters on functions and structs and show how you can write more advanced patterns of borrowing in Rust.</p><p>Prior experience with Rust is expected, and this training is <em>not</em> appropriate for pairing with the morning Beginner Rust training."
  - title: "RustBridge"
    speakers: carol, ashley
    focus: "Intro to Rust and Hands-on Workshop"
    timeslot: full
    abstract: "This free workshop is for people who are members of groups that are underrepresented in tech, in the style of RailsBridge. There will be a morning introduction to Rust concepts and an afternoon hands-on project. This class assumes no prior knowledge of Rust, but familiarity with any other programming language, the command line, and a text editor is recommended."
  - title: "Training: Tock Embedded OS"
    speakers: alevy
    focus: "Building embedded systems in Rust with Tock OS"
    timeslot: afternoon
    abstract: "Put Rust to practice in low-level embedded systems. This training will introduce cover programming for Tock, a secure embedded operating system for sensor networks and the Internet of Things, written in Rust. You will learn to write kernel extensions, the basics of porting Tock to a new platform, and how to write power- and memory-efficient applications. We will also give an overview of the system architecture.</p><p>This tutorial assumes basic knowledge of Rust, including ownership, borrowing, traits and lifetimes. While not required, it is most appropriate for people who are familiar with the material covered in the Advanced Rust training, and attanding the morning Intermediate Rust training is highly encouraged."
