speakers:
  - name: Aaron Turon
    ident: aaron
    image: aaron.jpg
    twitter: "aaron_turon"
    bio: "Aaron Turon (aturon) is a member of the Rust Core Team and employed by Mozilla Research. His main focus in Rust is language design, libraries, and project management. Prior to joining Mozilla, Aaron received his PhD from Northeastern University, with a focus on language and library design around lock-free data structures and other low-level concurrency concerns. His work won the John C. Reynold's award for outstanding dissertation in programming languages. He also worked with Derek Dreyer on correctness proofs of lock-free data structures, developing an early technique for doing so on top of the C11 memory model."
  - name: Ashley Williams
    ident: ashley
    image: ashley.jpg
    twitter: "ag_dubs"
    bio: "pizza"
  - name: Niko Matsakis
    ident: niko
    image: niko.jpg
    twitter: "nikomatsakis"
    bio: "Nicholas Matsakis (nmatsakis) is a member of the Rust Core Team and employed by Mozilla Research. His main focus in Rust is language design and compiler implementation. At Mozilla, he has also worked on Parallel JavaScript and other parallelization efforts. Prior to joining Mozilla, Niko received his PhD from ETH Zurich, likewise focused on parallelism and language design."
  - name: Michael Gattozzi
    ident: mgattozzi
    image: michael.jpg
    github: "mgattozzi"
    bio: "anime"
  - name: Steve Klabnik
    ident: steve
    image: steve2.png
    twitter: "steveklabnik"
    bio: "pizza"
  - name: Arshia Mufti
    ident: arshia
    image: arshia.jpg
    twitter: "arshia__"
  - name: Katharina
    ident: katharina
    image: katharina.jpg
    twitter: "spacekookie"
  - name: Sergio Benitez
    ident: sergio
    image: sergio.png
    github: "SergioBenitez"
  - name: Nicholas Cameron
    ident: nrc
    image: nrc.png
    github: "nick_r_cameron"
  - name: Isis Lovecruft
    ident: isis
    image: isis.jpg
    twitter: "isislovecruft"
    bio: "TBD"
  - name: Chelsea Komlo
    ident: chelsea
    image: chelsea.jpg
    twitter: "chelseakomlo"
    bio: "TBD"
  - name: Ryan Plauche
    ident: ryanplauche
    image: ryanplauche.png
    twitter: "plauplauplau"
    bio: "TBD"
  - name: Sunjay Varma
    ident: sunjay
    image: sunjay.jpg
    twitter: "Sunjay03"
    bio: "TBD"
  - name: James Munns
    ident: jamesmunns
    image: jamesmunns.jpg
    twitter: bitshiftmask
    bio: "TBD"
  - name: Douglas Campos
    ident: douglascampos
    image: douglascampos.jpg
    twitter: qmx
    bio: "TBD"
  - name: "Paul Mason"
    ident: paulmason
    image: paulmason.jpg
    twitter: paupino_masano
    bio: "TBD"
  - name: "Quiet Misdreavus"
    ident: misdreavus
    image: misdreavus.png
    twitter: QuietMisdreavus
    bio: "TBD"
  - name: "Shaquille Johnson"
    ident: shaquille
    image: shaquille.jpg
    twitter: ShaqHacks
    bio: "TBD"
talks:
  - title: "Opening Keynote"
    abstract: "Aaron, Ashley, and Niko will deliver an update on the state of all things Rust. You don't want to miss it!"
    speakers: aaron, ashley, niko
    ident: keynote
  - title: "Integrating Rust into Tor: Successes and Challenges"
    abstract: |
      <p>In 2016, The Tor Project's network team decided to experiment with writing existing and new functionality in Rust. Since then, this experiment has turned into a team initiative, with multiple team members adding infrastructure and new functionality with the goal of integrating Rust components directly into the core Tor code base. By 2019, we will have several features tha will be only supported in Rust.
      <p>With this effort has come many challenges and questions, some which have remained unresolved. In this talk, we propose walking through this timeline, and sharing what we have learned, what was good, and what was challenging about integrating Rust into a 10+ year old security-critical C codebase. We will also offer ideas about what could make this easier going forward, and what we are excited and hoping to see in future Rust versions. Overall, we at The Tor Project are big fans of Rust. We are looking forward to sharing what we have learned and accomplished over the last two years.
    speakers: isis, chelsea
    ident: tor
  - title: "Space, The Rusty Frontier"
    abstract: |
      <p>Space. It is often thought of as the final frontier for humans. Why not also for Rust?
      <p>In the fall of 2017 we began using Rust on an upcoming CubeSat mission. Writing safe, performant software is a high priority for us, one shared by the aerospace industry. Our software framework was originally written in C but we wanted to explore other options which could give us more confidence in our code and allow us to leverage newer technologies. For us Rust fits the bill with its emphasis on safety, growing community, and high level software patterns.
      <p>This presentation will cover the finer points of why we settled on Rust, how we integrated Rust into our existing C environment, how Rust has affected our developer productivity, pictures of the (first?) spacecraft running Rust in low Earth orbit and thoughts on the future of Rust in Space.
    speakers: ryanplauche
    ident: spaace
  - title: "Writing Crates for Complete Beginners - A Tour of Turtle"
    abstract: |
      <p>Turtle is a Rust graphics crate for creating animated drawings. It is designed to be used to teach programming to complete beginners using Rust. In this talk, you'll learn the inner workings of turtle. We'll show you how we managed to create a library that is both full of features and very easy to learn. We'll go deep into how turtle works and tell you the key aspects of creating a crate that is accessible for anyone of any skill level. You'll leave with new ideas for your own crates and a good understanding of what went into making turtle so beginner friendly.
    speakers: sunjay
    ident: turtle
  - title: "Getting Something for Nothing"
    abstract: |
      <p>This talk explores how to use the Rust Type System and Borrow Checker to write safe abstractions of hardware, even when using direct control of memory mapped peripherals with <code>unsafe</code> blocks. Because these techniques move all (or most) of the checking to compile time, these techniques are perfect for systems where high performance or resource constraints are a requirement.
      <p> This talk will explain and explore how these techniques are used on Microcontroller systems as a critical part of the <code>embedded-hal</code> ecosystem.
    speakers: jamesmunns
    ident: somethingfornothing
  - title: "How to (not) introduce Rust at your workplace - a tale"
    abstract: |
      <p>So I've tried to introduce Rust at my $DAYJOB, and failed miserably.

      <p>Failure can be a great catalyst for reflection, and indeed, there was a lot of valuable lessons to be learned!

      <p>At this brief talk, I'll not only share the pitfalls to avoid, but the insights I've gained while trying to make Rust work for us (and maybe for you?).
    speakers: douglascampos
    ident: howtonot
  - title: "Embedding Rust in C/C++"
    abstract: |
      <p>We all know that using C/C++ code in Rust is not too complicated. <code>extern "C"</code>, <code>bindgen</code> and <code>build.rs</code> scripts make this pretty easy.
      But let’s challenge ourselves: what about the other way around? There are huge C and C++ projects that could use some corrosion.

      <p>In this talk I will not just show simple examples of how to use Rust modules inside larger C/C++
      applications, the common pitfalls you will encounter, and to deal with them.
    speakers: katharina
    ident: ffi
  - title: "Benchmarking and Optimization of Rust Libraries"
    abstract: |
      <p> As we develop the Rust eco-system we have a goal that "Rust should provide easy access to high quality crates".
      This means libraries must be both ergonomic and perform well. Rust provides various frameworks to help benchmark libraries
      however achieving performance past a certain point requires knowledge of some deep language constructs. 
      <p> This talk explores a journey towards benchmarking various library functions consistently and
      fairly and consequently exploring strategies for optimizing performance.
    speakers: paulmason
    ident: benchmarking
  - title: "The Dark Secrets Lurking Inside <code>cargo doc</code>"
    abstract: |
      <p> Every Rustacean reads the standard library docs (or some other library docs) sooner or later.
      Many Rustaceans have run <code>cargo doc</code> to generate some documentation for their own library or their dependencies.
      But how many have looked at the tool behind <code>cargo doc</code>? In this talk, I'll divulge some hidden secrets of <code>rustdoc</code>, the tool used by <code>cargo doc</code> to generate documentation.
    speakers: misdreavus
    ident: doc
  - title: "Reddit & Rust"
    abstract: |
      <p> Reddit recently rewrote its markdown parser from C into Rust. We did this because maintaining this security-critical component in memory-unsafe C was too difficult - at one point we had a feature in security review for a year, and that's not acceptable.
      <p> This talk describes my experience with Rust, walking through the many libraries that we tried, which ones we decided to go forward with, which ones we didn’t, and how we coordinated our internal team with upstream crate authors.
    speakers: shaquille
    ident: reddit
trainings:
  - title: "Rust for Beginners"
    speakers: steve
    timeslot: morning
    slug: beginner
    room: 0
    focus: "Rust Fundamentals: Ownership and Borrowing"
    abstract: |
      <p>Learn everything you need to get started writing Rust programs. The tutorial puts a focus on Ownership and Borrowing, which are the key techniques that Rust uses to achieve both safety and low-level performance.

      <p>This class assumes no prior knowledge of Rust, though programming experience in some other language would be helpful.

      <p>Participants should bring their own laptops. Additional machine setup instructions will be sent ~1 week prior to the training.
  - title: "Traits and Threads"
    speakers: aaron
    timeslot: morning
    slug: intermediate
    room: 1
    abstract: |
      <p>Move your Rust knowledge up a level! This tutorial introduces the second key piece of Rust, its trait system.
      You’ll learn how the trait system is the foundation for generic programming in Rust, allowing you to write one piece
      of code that can be reused in many contexts. The session will also cover how to write threaded programs in Rust, and
      demonstrate how threaded programming in Rust builds on the trait system to guarantee data-race freedom.
      
      <p>This tutorial assumes basic understanding of ownership and borrowing; if you have been writing Rust for a while, you should do fine.
      
      <p>Participants should bring their own laptops. Additional machine setup instructions will be sent ~1 week prior to the training.
  - title: "How to think in Rust"
    speakers: nrc
    timeslot: afternoon
    room: 0
    slug: think
    abstract: |
      <p>Learning a new programming language is hard. Even after mastering the syntax and type system, learning the libraries and techniques can take years.
      If you've read or written Rust and want to improve, this talk will give you a turbo boost! This will be a very practical tutorial, aimed at taking your Rust programming to the next level.
      We'll teach some core Rust design principles by covering a few key topics in depth. This tutorial is aimed at those with some Rust experience, but if you're a total beginner,
      you'll still learn a lot about what Rust programming is like in practice.
      
      <p>The tutorial will start with programming 'in the small': we'll explore some key library types (Option, Result, and Iterator) and cover practical error handling.
      Putting these together we'll see how to structure your control flow to write clear, succinct programs. We'll then cover some larger-scale design issues - using ownership
      as a primary architectural principle, and abstraction using traits. 
      
      <p>You'll learn how to be more productive in Rust by writing clean and idiomatic code. You'll learn to work with the language rather than fighting against it.

      <p>Participants should bring their own laptops. Additional machine setup instructions will be sent ~1 week prior to the training.
  - title: "Futures and Async Programming"
    speakers: mgattozzi
    timeslot: afternoon
    room: 1
    slug: futures
    abstract: |
      <p>Get started with understanding Asynchronous code in Rust! Whether you've just started using Async or you've been using
      it from it's inception there is something for everyone here. It'll show how to use the new async/await syntax, pinning api,
      and how to effectively leverage Futures in your Rust code. This class assumes you already have an understanding of how Rust works for the most part.

      <p>Participants should bring their own laptops. Additional machine setup instructions will be sent ~1 week prior to the training.
  - title: "WebAssembly"
    speakers: steve, ashley
    timeslot: afternoon
    room: 2
    slug: wasm
    abstract: |
      <p> In this workshop we'll walk you through a practical introduction to writing Rust-generated WebAssembly. We'll
      start from a basic Rust crate and work towards compiling, packaging, and publishing it to npm. From their we'll
      work on integrating our WebAssembly with other JavaScript code, bundling it for the browser with WebPack. Along
      the way we'll touch on important best practices for testing, debugging, and profiling your WebAssembly code.
  - title: "Secure Web Services in Rocket"
    speakers: sergio
    timeslot: morning
    room: 2
    slug: rocket
    abstract: |
      <p>Take the safety and reliability of Rust that you're used to into the world of web services with <a href="https://rocket.rs/">Rocket</a>!
      You'll write a fully working, database-backed web application in Rocket to learn first-hand how Rocket
      leverages Rust's type system and code generation facilities to prevent correctness and web security bugs at compile-time.
      Discover why thousands of developers and companies are writing or rewriting their web services in Rocket.

      <p>This workshop is intended for developers with experience writing software in Rust.
      Working knowledge of HTTP and the web will be helpful but not required.

      <p>Participants will need their own laptop. Before attending the workshop, participants
      should ensure that they can compile and run the "Hello, world!" Rocket application. Full instructions are available in <a href="https://rocket.rs/guide/getting-started/">Rocket’s Getting Started guide</a>.
  - title: "RustBridge"
    speakers: arshia, katharina
    focus: "Intro to Rust and Hands-on Workshop"
    timeslot: full
    room: 3
    slug: rustbridge
    abstract: |
      <p>This free workshop is for people who are members of groups that are underrepresented in tech, in the style of <a href="http://www.railsbridge.org/">RailsBridge</a>.
      There will be a morning introduction to Rust concepts and an afternoon hands-on project. This class assumes no prior knowledge of Rust, but familiarity with any other programming language, the command line, and a text editor is recommended.
  
      <p>Participants should bring their own laptops. Additional machine setup instructions will be sent ~1 week prior to the training.
pc:
  - name: Arshia Mufti
    image: arshia.jpg
    twitter: "arshia__"
  - name: Ashley Williams
    image: ashley.jpg
    twitter: "ag_dubs"
  - name: Chris Krycho
    image: krycho.jpg
    twitter: "chriskrycho"
  - name: Jorge Aparicio
    image: japaric.jpg
    twitter: "japaricious"
  - name: Julia Evans
    image: julia.jpeg
    twitter: "b0rk"
  - name: Michael Gattozzi
    image: michael.jpg
    twitter: "mgattozzi"
  - name: Nicholas Cameron
    image: nrc.png
    twitter: "nick_r_cameron"
  - name: Nika Layzell
    image: nika.jpg
    twitter: "kneecaw"
  - name: Steve Klabnik
    image: steve2.png
    twitter: "steveklabnik"
orga:
  - name: Leah Silber
    image: about-leah.jpg
    twitter: "wifelette"
  - name: Manish Goregaokar
    image: manish.png
    twitter: "manishearth"
  - name: Ashley Williams
    image: ashley.jpg
    twitter: "ag_dubs"
  - name: Without Boats
    image: boats.jpg
    twitter: "withoutboats"

